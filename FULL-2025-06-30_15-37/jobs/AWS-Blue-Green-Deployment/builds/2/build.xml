<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1537.v66038d35fc76">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>shubh</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <jenkins.metrics.impl.TimeInQueueAction plugin="metrics@4.2.32-476.v5042e1c1edd7">
      <queuingDurationMillis>1</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>0</buildableDurationMillis>
      <waitingDurationMillis>0</waitingDurationMillis>
    </jenkins.metrics.impl.TimeInQueueAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="pipeline-groovy-lib@752.vdddedf804e72">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction plugin="pipeline-model-definition@2.2255.v56a_15e805f12">
      <stagesUUID>77f87403-da5e-48be-b051-2750ded19f95</stagesUUID>
      <pipelineDefs>
        <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef plugin="pipeline-model-api@2.2255.v56a_15e805f12">
          <stages>
            <stages>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>1. Identify Inactive Environment</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">def current_live_tg = sh(script: &quot;aws elbv2 describe-listeners --listener-arns ${LISTENER_ARN} | jq -r &apos;.Listeners[0].DefaultActions[0].TargetGroupArn&apos;&quot;, returnStdout: true).trim()
                    if (current_live_tg == BLUE_TG_ARN) {
                        env.DEPLOY_TO_ENV = &apos;green&apos;
                        env.DEPLOY_TO_TG_NAME = &apos;green-tg&apos;
                    } else {
                        env.DEPLOY_TO_ENV = &apos;blue&apos;
                        env.DEPLOY_TO_TG_NAME = &apos;blue-tg&apos;
                    }
                    echo &quot;Live traffic is NOT on ${env.DEPLOY_TO_ENV.toUpperCase()}. We will configure the ${env.DEPLOY_TO_ENV.toUpperCase()} server.&quot;</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>2. Configure Inactive Server (Automated)</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">echo &quot;Running Ansible on the existing &apos;${env.DEPLOY_TO_ENV}-server&apos;...&quot;
                    if (env.DEPLOY_TO_ENV == &apos;blue&apos;) {
                        ansiblePlaybook(playbook: &apos;configure_blue.yml&apos;)
                    } else {
                        ansiblePlaybook(playbook: &apos;configure_green.yml&apos;)
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>3. Verify Inactive Server (Manual)</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>input</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>message</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                                <value class="string">&quot;ACTION: The &apos;${env.DEPLOY_TO_ENV}-server&apos; is configured. In AWS, go to Target Groups -&gt; &apos;${env.DEPLOY_TO_TG_NAME}&apos; and confirm the server&apos;s health status is &apos;healthy&apos;. Click &apos;Proceed&apos; when ready.&quot;</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>4. Switch Live Traffic (Manual)</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>input</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>message</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                                <value class="string">&quot;FINAL ACTION: In AWS, go to Load Balancers -&gt; your ALB -&gt; Listeners. Edit the listener to forward traffic to &apos;${env.DEPLOY_TO_TG_NAME}&apos;. Test the ALB&apos;s DNS name in a browser. Click &apos;Proceed&apos; when done.&quot;</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>5. Deployment Complete</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>echo</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>message</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                                <value class="string">&quot;Success! The ${env.DEPLOY_TO_ENV.toUpperCase()} environment is now LIVE.&quot;</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            </stages>
            <uuid>77f87403-da5e-48be-b051-2750ded19f95</uuid>
          </stages>
          <environment>
            <variables class="linked-hash-map">
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>AWS_ACCESS_KEY_ID</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTInternalFunctionCall>
                  <name>credentials</name>
                  <args>
                    <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                      <value class="string">aws-access-key</value>
                    </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  </args>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTInternalFunctionCall>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>AWS_SECRET_ACCESS_KEY</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTInternalFunctionCall>
                  <name>credentials</name>
                  <args>
                    <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                      <value class="string">aws-secret-key</value>
                    </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  </args>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTInternalFunctionCall>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>AWS_DEFAULT_REGION</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">ap-south-1</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
            </variables>
          </environment>
          <agent>
            <agentType>
              <key>any</key>
            </agentType>
          </agent>
        </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef>
      </pipelineDefs>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction>
    <com.cloudbees.plugins.credentials.builds.CredentialsParameterBinder plugin="credentials@1415.v831096eb_5534">
      <boundCredentials class="concurrent-hash-map"/>
    </com.cloudbees.plugins.credentials.builds.CredentialsParameterBinder>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@4117.vc0f3c515a_a_a_0">
      <env class="tree-map">
        <entry>
          <string>DEPLOY_TO_ENV</string>
          <string>green</string>
        </entry>
        <entry>
          <string>DEPLOY_TO_TG_NAME</string>
          <string>green-tg</string>
        </entry>
      </env>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
    <jenkins.metrics.impl.SubTaskTimeInQueueAction plugin="metrics@4.2.32-476.v5042e1c1edd7">
      <queuingDurationMillis>7</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>4</buildableDurationMillis>
      <waitingDurationMillis>1</waitingDurationMillis>
      <executingDurationMillis>1448</executingDurationMillis>
      <workUnitCount>1</workUnitCount>
    </jenkins.metrics.impl.SubTaskTimeInQueueAction>
  </actions>
  <queueId>3</queueId>
  <timestamp>1751160678245</timestamp>
  <startTime>1751160678247</startTime>
  <result>FAILURE</result>
  <duration>2342</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>FAILURE</result>
    <script>// ---&gt; PASTE YOUR REAL ARNs HERE &lt;---
def BLUE_TG_ARN = &quot;arn:aws:elasticloadbalancing:ap-south-1:842517499452:targetgroup/blue-tg/abe593ed83cd16f2&quot;
def GREEN_TG_ARN = &quot;arn:aws:elasticloadbalancing:ap-south-1:842517499452:targetgroup/green-tg/2512444eccb6e20b&quot;
def LISTENER_ARN = &quot;arn:aws:elasticloadbalancing:ap-south-1:842517499452:listener/app/my-app-alb/b152e3cf6806334f/d5334709ce151d9d&quot;

pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID     = credentials(&apos;aws-access-key&apos;)
        AWS_SECRET_ACCESS_KEY = credentials(&apos;aws-secret-key&apos;)
        AWS_DEFAULT_REGION    = &apos;ap-south-1&apos; // Change if your region is different
    }
    stages {
        stage(&apos;1. Identify Inactive Environment&apos;) {
            steps {
                script {
                    def current_live_tg = sh(script: &quot;aws elbv2 describe-listeners --listener-arns ${LISTENER_ARN} | jq -r &apos;.Listeners[0].DefaultActions[0].TargetGroupArn&apos;&quot;, returnStdout: true).trim()
                    if (current_live_tg == BLUE_TG_ARN) {
                        env.DEPLOY_TO_ENV = &apos;green&apos;
                        env.DEPLOY_TO_TG_NAME = &apos;green-tg&apos;
                    } else {
                        env.DEPLOY_TO_ENV = &apos;blue&apos;
                        env.DEPLOY_TO_TG_NAME = &apos;blue-tg&apos;
                    }
                    echo &quot;Live traffic is NOT on ${env.DEPLOY_TO_ENV.toUpperCase()}. We will configure the ${env.DEPLOY_TO_ENV.toUpperCase()} server.&quot;
                }
            }
        }
        stage(&apos;2. Configure Inactive Server (Automated)&apos;) {
            steps {
                script {
                    echo &quot;Running Ansible on the existing &apos;${env.DEPLOY_TO_ENV}-server&apos;...&quot;
                    if (env.DEPLOY_TO_ENV == &apos;blue&apos;) {
                        ansiblePlaybook(playbook: &apos;configure_blue.yml&apos;)
                    } else {
                        ansiblePlaybook(playbook: &apos;configure_green.yml&apos;)
                    }
                }
            }
        }
        stage(&apos;3. Verify Inactive Server (Manual)&apos;) {
            steps {
                input &quot;ACTION: The &apos;${env.DEPLOY_TO_ENV}-server&apos; is configured. In AWS, go to Target Groups -&gt; &apos;${env.DEPLOY_TO_TG_NAME}&apos; and confirm the server&apos;s health status is &apos;healthy&apos;. Click &apos;Proceed&apos; when ready.&quot;
            }
        }
        stage(&apos;4. Switch Live Traffic (Manual)&apos;) {
            steps {
                input &quot;FINAL ACTION: In AWS, go to Load Balancers -&gt; your ALB -&gt; Listeners. Edit the listener to forward traffic to &apos;${env.DEPLOY_TO_TG_NAME}&apos;. Test the ALB&apos;s DNS name in a browser. Click &apos;Proceed&apos; when done.&quot;
            }
        }
        stage(&apos;5. Deployment Complete&apos;) {
            steps {
                echo &quot;Success! The ${env.DEPLOY_TO_ENV.toUpperCase()} environment is now LIVE.&quot;
            }
        }
    }
}</script>
    <loadedScripts class="linked-hash-map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>149374322</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>1436624980</long>
      </entry>
      <entry>
        <string>runQueue</string>
        <long>730574771</long>
      </entry>
      <entry>
        <string>run</string>
        <long>1094718158</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>258910997</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>151280017</long>
      </entry>
    </timings>
    <internalCalls class="sorted-set">
      <string>org.jenkinsci.plugins.pipeline.StageStatus.TAG_NAME</string>
    </internalCalls>
    <sandbox>true</sandbox>
    <iota>50</iota>
    <head>1:50</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
    <storageDir>workflow-completed</storageDir>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>